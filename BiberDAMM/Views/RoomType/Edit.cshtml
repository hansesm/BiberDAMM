@* AUTHOR     : [JEL] *@

@* Class to edit roomtypes *@

@using BiberDAMM.Helpers
@model BiberDAMM.Models.RoomType
@{
    ViewBag.Title = "Raumtyp bearbeiten";
}
<!--If changing roomtypedetails failed-->
@if (TempData["EditRoomTypeFailed"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        <strong>Der RaumTyp konnte nicht geändert werden!</strong>@TempData["EditRoomTypeFailed"]
    </div>
}


<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.Id)
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })        
        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>         
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input title="Änderungen speichern" type="submit" name="command" value="Speichern" class="btn btn-outline-primary btn-sm" />
                <input title="Zur Detailssicht" type="submit" name="command" value=@ConstVariables.AbortButton class="btn btn-outline-primary btn-sm" formnovalidate="formnovalidate" />
            </div>
        </div>
    </div>
}